type token =
  | IDENTIFIER of (string)
  | INT of (int)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | TRUE
  | FALSE
  | EQ_TOK
  | LE_TOK
  | NOT
  | AND
  | OR
  | SKIP
  | SET
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | LET
  | IN
  | PRINT
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
(* 
 * Parser for our IMP concrete syntax. 
 * See http://caml.inria.fr/pub/docs/manual-ocaml/manual026.html
 * but basically it works just like Yacc/Bison.
 * See http://en.wikipedia.org/wiki/YACC
 *)

open Imp		    (* IMP abstract syntax *)

let error msg	= failwith msg

# 48 "parse.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* EQ_TOK *);
  267 (* LE_TOK *);
  268 (* NOT *);
  269 (* AND *);
  270 (* OR *);
  271 (* SKIP *);
  272 (* SET *);
  273 (* SEMICOLON *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  277 (* WHILE *);
  278 (* DO *);
  279 (* LET *);
  280 (* IN *);
  281 (* PRINT *);
  282 (* LPAREN *);
  283 (* RPAREN *);
  284 (* LBRACE *);
  285 (* RBRACE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\003\000\003\000\002\000\003\000\003\000\003\000\
\001\000\003\000\003\000\006\000\004\000\006\000\002\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\001\000\009\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\008\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\018\000\019\000"

let yysindex = "\255\255\
\045\255\000\000\248\254\000\000\002\255\002\255\008\255\025\255\
\045\255\252\254\025\255\000\000\000\000\000\000\000\000\002\255\
\002\255\126\255\048\255\058\255\014\255\025\255\135\255\000\255\
\045\255\135\255\000\000\071\255\249\254\025\255\025\255\025\255\
\025\255\025\255\025\255\025\255\002\255\002\255\045\255\045\255\
\025\255\083\255\000\000\252\254\000\000\000\000\052\255\052\255\
\077\255\135\255\135\255\135\255\135\255\004\255\000\000\030\255\
\252\254\088\255\045\255\045\255\252\254\252\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\023\000\045\000\
\001\000\065\000\085\000\086\255\101\255\084\255\000\000\000\000\
\031\000\000\000\000\000\000\000\034\000\037\000"

let yygindex = "\000\000\
\252\255\008\000\016\000"

let yytablesize = 370
let yytable = "\001\000\
\005\000\023\000\012\000\013\000\024\000\037\000\038\000\011\000\
\021\000\014\000\015\000\018\000\025\000\016\000\019\000\023\000\
\025\000\038\000\026\000\046\000\044\000\020\000\003\000\041\000\
\028\000\012\000\013\000\017\000\043\000\042\000\021\000\027\000\
\029\000\020\000\056\000\057\000\022\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\004\000\003\000\025\000\025\000\
\058\000\059\000\022\000\000\000\054\000\055\000\061\000\062\000\
\032\000\033\000\034\000\004\000\037\000\038\000\005\000\000\000\
\006\000\006\000\039\000\007\000\000\000\008\000\037\000\038\000\
\009\000\030\000\031\000\032\000\033\000\034\000\000\000\040\000\
\035\000\036\000\033\000\034\000\007\000\030\000\031\000\032\000\
\033\000\034\000\030\000\031\000\032\000\033\000\034\000\000\000\
\014\000\045\000\011\000\011\000\000\000\000\000\014\000\000\000\
\011\000\014\000\000\000\011\000\000\000\045\000\014\000\060\000\
\011\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\012\000\
\030\000\031\000\032\000\033\000\034\000\000\000\000\000\035\000\
\036\000\030\000\031\000\032\000\033\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\005\000\005\000\000\000\000\000\
\000\000\000\000\005\000\005\000\000\000\005\000\005\000\000\000\
\000\000\005\000\023\000\005\000\005\000\023\000\005\000\000\000\
\005\000\003\000\003\000\005\000\018\000\005\000\023\000\018\000\
\003\000\003\000\019\000\003\000\003\000\000\000\000\000\003\000\
\018\000\003\000\003\000\019\000\003\000\000\000\003\000\004\000\
\004\000\003\000\021\000\003\000\000\000\020\000\004\000\004\000\
\022\000\004\000\004\000\021\000\000\000\004\000\020\000\004\000\
\004\000\022\000\004\000\000\000\004\000\000\000\000\000\004\000\
\000\000\004\000\006\000\006\000\000\000\006\000\006\000\000\000\
\000\000\006\000\000\000\006\000\006\000\000\000\006\000\000\000\
\006\000\000\000\000\000\006\000\000\000\006\000\007\000\007\000\
\000\000\007\000\007\000\000\000\000\000\007\000\000\000\007\000\
\007\000\000\000\007\000\000\000\007\000\000\000\000\000\007\000\
\000\000\007\000"

let yycheck = "\001\000\
\000\000\000\000\001\001\002\001\009\000\013\001\014\001\016\001\
\001\001\008\001\009\001\000\000\017\001\012\001\000\000\008\000\
\017\001\014\001\011\000\027\001\025\000\006\000\000\000\010\001\
\017\000\001\001\002\001\026\001\029\001\022\000\000\000\016\000\
\017\000\000\000\039\000\040\000\000\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\000\000\001\001\017\001\000\000\
\041\000\020\001\026\001\255\255\037\000\038\000\059\000\060\000\
\005\001\006\001\007\001\015\001\013\001\014\001\018\001\255\255\
\000\000\021\001\019\001\023\001\255\255\025\001\013\001\014\001\
\028\001\003\001\004\001\005\001\006\001\007\001\255\255\022\001\
\010\001\011\001\006\001\007\001\000\000\003\001\004\001\005\001\
\006\001\007\001\003\001\004\001\005\001\006\001\007\001\255\255\
\013\001\027\001\013\001\014\001\255\255\255\255\019\001\255\255\
\019\001\022\001\255\255\022\001\255\255\027\001\027\001\024\001\
\027\001\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\027\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\255\255\013\001\014\001\255\255\
\255\255\017\001\017\001\019\001\020\001\020\001\022\001\255\255\
\024\001\003\001\004\001\027\001\017\001\029\001\029\001\020\001\
\010\001\011\001\020\001\013\001\014\001\255\255\255\255\017\001\
\029\001\019\001\020\001\029\001\022\001\255\255\024\001\003\001\
\004\001\027\001\020\001\029\001\255\255\020\001\010\001\011\001\
\020\001\013\001\014\001\029\001\255\255\017\001\029\001\019\001\
\020\001\029\001\022\001\255\255\024\001\255\255\255\255\027\001\
\255\255\029\001\010\001\011\001\255\255\013\001\014\001\255\255\
\255\255\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\255\255\255\255\027\001\255\255\029\001\010\001\011\001\
\255\255\013\001\014\001\255\255\255\255\017\001\255\255\019\001\
\020\001\255\255\022\001\255\255\024\001\255\255\255\255\027\001\
\255\255\029\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  TRUE\000\
  FALSE\000\
  EQ_TOK\000\
  LE_TOK\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  SET\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  LET\000\
  IN\000\
  PRINT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 60 "parse.mly"
                                             ( Const(_1) )
# 275 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parse.mly"
                                             ( Var(_1) )
# 282 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 62 "parse.mly"
                                             ( Add (_1,_3) )
# 290 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 63 "parse.mly"
                                             ( Sub (_1,_3) )
# 298 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 64 "parse.mly"
                                             ( Mul (_1,_3) )
# 306 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 65 "parse.mly"
                                             ( Div (_1,_3) )
# 314 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 66 "parse.mly"
                                             ( Mod (_1,_3) )
# 322 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    Obj.repr(
# 67 "parse.mly"
                                             ( _2 )
# 329 "parse.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parse.mly"
                                             ( True )
# 335 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parse.mly"
                                             ( False )
# 341 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 72 "parse.mly"
                                             ( EQ (_1,_3) )
# 349 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 73 "parse.mly"
                                             ( LE(_1,_3) )
# 357 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 74 "parse.mly"
                                             ( Not(_2) )
# 364 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 75 "parse.mly"
                                             ( And(_1,_3)  )
# 372 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 76 "parse.mly"
                                             ( Or(_1,_3) )
# 380 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexp) in
    Obj.repr(
# 77 "parse.mly"
                                             ( _2 )
# 387 "parse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parse.mly"
                                             ( Skip )
# 393 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 81 "parse.mly"
                                             ( Set(_1,_3) )
# 401 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Imp.com) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 82 "parse.mly"
                                             ( Seq(_1,_3) )
# 409 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Imp.com) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 83 "parse.mly"
                                             ( If(_2,_4,_6) )
# 418 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 84 "parse.mly"
                                             ( While(_2,_4) )
# 426 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Imp.com) in
    Obj.repr(
# 85 "parse.mly"
                                             ( Let(_2,_4,_6) )
# 435 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 86 "parse.mly"
                                             ( Print(_2) )
# 442 "parse.ml"
               : Imp.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Imp.com) in
    Obj.repr(
# 87 "parse.mly"
                                             ( _2 )
# 449 "parse.ml"
               : Imp.com))
(* Entry com *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let com (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Imp.com)
